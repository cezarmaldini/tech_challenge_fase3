# Importar Bibliotecas
import streamlit as st
from streamlit_option_menu import option_menu
import plotly.express as px
from queries.queries import (
    casos_positivos_estados,
    casos_positivos_por_genero,
    casos_positivos_faixa_etaria,
    casos_positivos_raca,
    casos_positivos_escolaridade,
    casos_positivos_auxilio,
    casos_positivos_renda,
    metricas_gerais
)

# Confiura√ß√£o inicial da aplica√ß√£o
st.set_page_config(
    page_title='Analytics | PNAD COVID 19',
    page_icon='üìä',
    layout='wide'
)

# Navega√ß√£o da Aplica√ß√£o
with st.sidebar:
    option = option_menu(
        menu_title="Navega√ß√£o",
        options=["Home", "Dashboard"],
        icons=["house", "bar-chart"],
        menu_icon="card-list",
        default_index=0
    )

# P√°gina Apresenta√ß√£o do Projeto
if option == 'Home':
    st.title("üìä Tech Challenge | Fase 3")
    st.markdown("---")

    # 1. Contextualiza√ß√£o do Problema
    st.header("üîç Contextualiza√ß√£o do Problema")
    st.markdown("""
    Durante a pandemia de COVID-19, compreender o comportamento da popula√ß√£o, os sintomas cl√≠nicos mais comuns e os impactos sociais e econ√¥micos 
    tornou-se uma prioridade para institui√ß√µes de sa√∫de. Pensando nisso, o governo brasileiro disponibilizou a pesquisa **PNAD COVID-19**, 
    realizada pelo IBGE, com o intuito de monitorar esses impactos de forma cont√≠nua.

    Agora, imagine que voc√™ foi contratado como **Especialista em Data Analytics** por um grande hospital, com a miss√£o de analisar como a popula√ß√£o 
    se comportou durante aquele per√≠odo e quais indicadores seriam essenciais para o planejamento estrat√©gico diante de um poss√≠vel novo surto da doen√ßa.

    Apesar de sua contrata√ß√£o ser recente, sua equipe identificou na PNAD COVID-19 uma fonte rica e confi√°vel de dados para orientar decis√µes cl√≠nicas, 
    demogr√°ficas e econ√¥micas. No entanto, a base √© extensa, descentralizada e bruta ‚Äî o que dificulta a obten√ß√£o de insights r√°pidos.

    Com base em at√© 20 questionamentos da pesquisa e dados de tr√™s meses selecionados, a solu√ß√£o visa fornecer ao hospital uma vis√£o clara sobre o 
    impacto da COVID-19 e apoiar a√ß√µes preventivas e estrat√©gicas no futuro.
    """)

    st.markdown("---")

    # 2. Solu√ß√£o
    st.header("üß© Solu√ß√£o")
    st.markdown("""
    Para responder ao desafio proposto, foi desenvolvida uma **arquitetura moderna de dados e analytics**, capaz de transformar os dados brutos da PNAD COVID-19 
    em informa√ß√µes acess√≠veis, relevantes e interativas.

    A solu√ß√£o √© composta por:

    - **Ingest√£o e tratamento dos dados** utilizando arquitetura em camadas (Bronze, Silver, Gold) no Microsoft Fabric.
    - **Interface interativa** para an√°lises explorat√≥rias via Streamlit, hospedada na nuvem.
    """)

    st.markdown('##### Arquitetura da Solu√ß√£o:')
    st.image("https://i.ibb.co/rKLb4C7G/Planejamento-de-Sprint-Quadro-1.jpg", use_container_width=True)

    st.markdown('##### Questionamentos utilizados:')
    st.markdown("""
    - **A002:** Idade do morador.
    - **A003:** Sexo.
    - **A004:** Cor ou ra√ßa.
    - **A005:** Escolaridade.
    - **B009B:** Resultados do exame SWAB.
    - **B009D:** Resultados do exame de sangue atrav√©s do dedo.
    - **B009F:** Resultados do exame de sangue atrav√©s da veia do bra√ßo.
    - **C007C:** Tipo de trabalho, cargo ou fun√ß√£o.
    - **C01011:** Faixa de rendimento.
    - **D0031:** Bolsa Fam√≠lia.
    - **D0051:** Aux√≠lio emergencial.
    - **F001:** Domic√≠lio.
    - **F0022:** N√∫mero da faixa do aluguel.
    """)

    st.markdown("""
    ##### Meses analisados:
    Setembro, Outubro e Novembro de 2020    
    """)

    st.markdown('##### A solu√ß√£o est√° dispon√≠vel em:')
    st.markdown('https://tech-challenge-fase3.onrender.com')

    st.markdown("---")

    # 3. Pipeline de Dados
    st.header("üîÑ Pipeline de Dados (ETL)")
    st.markdown("""
    A constru√ß√£o do pipeline de dados segue o conceito da arquitetura **medalh√£o** e foi implementada no **Microsoft Fabric**, garantindo qualidade, rastreabilidade e performance:

    | Camada | Descri√ß√£o | Notebook |
    |--------|-----------|----------|
    | ü•â **Bronze** | Dados brutos carregados diretamente dos arquivos disponibilizados pelo IBGE, sem qualquer modifica√ß√£o. |  |
    | ü•à **Silver** | Aplica√ß√£o de filtros, limpeza de dados desnecess√°rias, colunas renomeadas, formatos de dados. | `nb_dados_silver.ipynb` e `nb_dicionarios_silver.ipynb`|
    | ü•á **Gold** | Transforma√ß√µes finais com agrega√ß√µes, categoriza√ß√£o, mesclagens (joins) e prepara√ß√£o para an√°lises. | `nb_dados_gold.ipynb` |
    """)

    st.markdown('##### ü•â Camada Bronze')
    st.markdown("""
    Nessa camada os dados s√£o carregados manualmente no Files do Lakehouse, seguindo a estrutura da imagem: 
    """)
    col1, col2 = st.columns(2)
    with col1:
        st.image("https://i.ibb.co/XTGMMRp/dict.png", caption='Dicion√°rios', use_container_width=True)
    with col2:
        st.image("https://i.ibb.co/NgGTKH5W/dados-pnad.png", caption='Dados', use_container_width=True)

    st.markdown('##### ü•à Camada Silver')
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""
        **Arquivo: nb_dicionarios_silver.ipynb**
        
        Processa os arquivos de dicion√°rios armazenados na camada bronze e carrega na camada silver em formato parquet.
        """)
        st.image('https://i.ibb.co/4w9bsKv1/Planejamento-de-Sprint-Quadro-2.jpg', use_container_width=True)

    with col2:
        st.markdown("""
        **Arquivo: nb_dados_silver.ipynb**
        
        Processa os arquivos de dicion√°rios armazenados na camada bronze e carrega na camada silver em formato parquet.
        """)
        st.image('https://i.ibb.co/twKtK800/Planejamento-de-Sprint-Quadro-3.jpg', use_container_width=True)

    st.markdown('##### ü•á Camada Gold')
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("""
        **Arquivo: nb_dados_gold.ipynb**
        
        Processa dados armazenados na camada silver no formato parquet, faz as transforma√ß√µes necess√°rias para a fase de analytics
        e carrega na camada gold em formato delta table.
        """)
        st.image('https://i.ibb.co/mV8B6HVt/Planejamento-de-Sprint-Quadro-4.jpg', use_container_width=True)
        

    st.markdown("---")

    # 4. Analytics
    st.header("üìà Analytics")
    st.markdown("""
    A camada de **Analytics** foi desenvolvida com a biblioteca **Streamlit**, proporcionando uma interface interativa e acess√≠vel para explora√ß√£o dos dados.

    Funcionalidades principais:

    - Dashboards com an√°lises por estado, caracter√≠sticas demograficas, de trabalho e renda.
    - Filtros de m√™s, estado e tipos de exames
    - An√°lises por **g√™nero, idade, ra√ßa/cor, escolaridade e renda**
    - **Gr√°ficos interativos**: barras, roscas, mapas
    """)

    st.markdown("---")

    # 5. Tecnologias Utilizadas
    st.header("üõ†Ô∏è Tecnologias Utilizadas")
    st.markdown("""
    A solu√ß√£o foi desenvolvida com um conjunto de ferramentas modernas, voltadas para tratamento de dados em larga escala, visualiza√ß√£o interativa e implanta√ß√£o em nuvem:

    - **Microsoft Fabric:** Lakehouse, Notebooks, OneLake
    - **PySpark:** Processamento de dados
    - **SQL:** Consultas para an√°lises gr√°ficas
    - **Streamlit:** Constru√ß√£o da interface web
    - **Plotly:** Plotagem de gr√°ficos e visuais interativos
    - **GitHub:** Versionamento e CI/CD
    - **Render:** Deploy
    """)

    st.markdown("---")

    # 6. Estrutura do Reposit√≥rio
    st.header("üìÅ Estrutura do Reposit√≥rio")
    st.markdown("""
    O projeto foi versionado e est√° dispon√≠vel publicamente no GitHub:

    üîó [Acesse o reposit√≥rio no GitHub](https://github.com/cezarmaldini/tech_challenge_fase3)

    A estrutura do reposit√≥rio foi organizada para garantir **manutenibilidade, legibilidade e separa√ß√£o de responsabilidades**:

    | Diret√≥rio/Arquivo | Descri√ß√£o |
    |-------------------|-----------|
    | `app.py` | Arquivo principal da aplica√ß√£o Streamlit. |
    | `config/` | Cont√©m scripts de configura√ß√£o, como conex√£o com banco de dados (`db.py`). |
    | `queries/` | Cont√©m o m√≥dulo de consultas SQL utilizadas nos dashboards (`queries.py`). |
    | `notebooks/` | Notebooks utilizados nas etapas de ingest√£o, tratamento e transforma√ß√£o dos dados. |
    | `requirements.txt` | Lista de depend√™ncias para ambiente Python. |
    | `.streamlit/config.toml` | Arquivo de configura√ß√£o da interface do Streamlit. |
    | `README.md` | Descri√ß√£o do projeto, instru√ß√µes de execu√ß√£o e prop√≥sito. |

    A organiza√ß√£o do reposit√≥rio segue boas pr√°ticas de projetos em ci√™ncia de dados e engenharia de dados, com separa√ß√£o entre camada de aplica√ß√£o, l√≥gica de dados e notebooks explorat√≥rios.
    """)

    st.markdown("---")

    st.success("Projeto finalizado com arquitetura moderna, dados de qualidade e an√°lises acess√≠veis.")

# P√°gina Dashboard
elif option == 'Dashboard':
    st.title('Data Analytics | PNAD COVID 19')
    st.markdown('##### Per√≠do: setembro, outubro e novembro de 2020')

    # Filtros
    with st.expander('Filtros'):
        col1, col2, col3 = st.columns(3)

        # Filtro de Meses
        with col1:
            mes_opcao = st.selectbox("M√™s", ["Todos", "setembro", "outubro", "novembro"])
            mes_param = None if mes_opcao == "Todos" else mes_opcao

        # Filtro de Estados
        with col2:
            estados_disponiveis = [
                "Todos", "Acre", "Alagoas", "Amap√°", "Amazonas", "Bahia", "Cear√°", "Distrito Federal",
                "Esp√≠rito Santo", "Goi√°s", "Maranh√£o", "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais",
                "Par√°", "Para√≠ba", "Paran√°", "Pernambuco", "Piau√≠", "Rio de Janeiro", "Rio Grande do Norte",
                "Rio Grande do Sul", "Rond√¥nia", "Roraima", "Santa Catarina", "S√£o Paulo", "Sergipe", "Tocantins"
            ]
            estado_opcao = st.selectbox("Estado", estados_disponiveis)
            estado_param = None if estado_opcao == "Todos" else estado_opcao

            # Filtro de Tipo de Exame
        with col3:
            tipo_exame_dict = {
            "Coleta de Sangue": "exame_sangue",
            "Coleta de Sangue Furo no Dedo": "exame_dedo",
            "SWAB": "exame_swab"
            }

            tipo_exame_selecionado = st.selectbox(
                "Tipo de Exame",
                options=list(tipo_exame_dict.keys()),
                index=0
            )

            exame_param = tipo_exame_dict[tipo_exame_selecionado]

    # M√©tricas Gerais
    st.header('M√©tricas Gerais')
    met = metricas_gerais(mes_param, estado_param, exame_param)

    def format_brl(n):
        return f"{n:,}".replace(",", ".")

    col1, col2, col3 = st.columns(3)
    col1.metric("Total de Pessoas Entrevistadas", format_brl(met.total_entrevistados.iloc[0]))
    col2.metric("Total de Testes Realizados", format_brl(met.total_testes.iloc[0]))
    col3.metric("Total de Testes Positivos", format_brl(met.total_positivos.iloc[0]))
        
    st.divider()

    # An√°lises por Estado
    st.header('An√°lise por Estado')

    st.markdown("#### Mapa de Casos por Estado")

    df = casos_positivos_estados(mes_param, estado_param, exame_param)
    df['estado'] = df['estado'].str.title()

    geojson_url = "https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson"

    fig = px.choropleth(
        df,
        geojson=geojson_url,
        locations='estado',
        featureidkey='properties.name',
        color='positivos',  # alterado aqui
        color_continuous_scale=['#8ae4ff', '#0c5ab5'],
        hover_data=['positivos', 'total_testes'],
        labels={'positivos': 'Casos Positivos'}  # alterado aqui
    )

    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})

    st.plotly_chart(fig, use_container_width=True)
        
    st.divider()
        
    # An√°lises por Caracter√≠sticas Demogr√°ficas
    st.header('An√°lise por Caracter√≠sticas Demogr√°ficas')

    col1, col2 = st.columns(2)
    with col1:
        # Casos Positivos por Cor/Ra√ßa
        st.markdown("#### Casos Positivos por Cor/Ra√ßa")
        df_cor = casos_positivos_raca(mes_param, estado_param, exame_param)

        fig_cor = px.bar(
            df_cor,
            x="cor",
            y="total_casos_positivos",
            color="total_casos_positivos",
            color_continuous_scale=['#8ae4ff', '#0c5ab5'],
            labels={"cor": "Cor/Ra√ßa", "total_casos_positivos": "Casos Positivos"},
            height=500
        )

        fig_cor.update_layout(xaxis_title="Cor/Ra√ßa", yaxis_title="Casos Positivos")
        st.plotly_chart(fig_cor, use_container_width=True)
        
    with col2:
        # Casos Positivos por Faixa Et√°ria
        st.markdown("#### Casos Positivos por Faixa Et√°ria")

        df_idade = casos_positivos_faixa_etaria(mes_param, estado_param, exame_param)

        fig_linhas = px.line(
            df_idade,
            x="faixa_etaria",
            y=["positivos"],
            markers=True,
            labels={"value": "Quantidade", "faixa_etaria": "Faixa Et√°ria", "variable": "Tipo"}
        )

        st.plotly_chart(fig_linhas, use_container_width=True)
        
    col1, col2 = st.columns(2)
    with col1:
        # Casos Positivos por G√™nero
        st.markdown("#### Casos Positivos por G√™nero")
        df_sexo = casos_positivos_por_genero(mes_param, estado_param, exame_param)
        fig_sexo = px.pie(
            df_sexo,
            names='sexo',
            values='positivos',
            hole=0.60,
            color_discrete_sequence=['#0c5ab5', '#07a6d5']
        )
        fig_sexo.update_layout(
            showlegend=True,
            margin=dict(t=0, b=0, l=0, r=0),
            height=300
        )
        st.plotly_chart(fig_sexo, use_container_width=True)
        
    with col2:
        # Casos Positivos por Escolaridade
        st.markdown("#### Casos Positivos por Escolaridade")
        df_esc = casos_positivos_escolaridade(mes_param, estado_param, exame_param)

        df_esc = df_esc.sort_values(by="positivos", ascending=True)

        fig_esc = px.bar(
            df_esc,
            x="positivos",
            y="escolaridade",
            orientation='h',
            color="positivos",
            color_continuous_scale=['#8ae4ff', '#0c5ab5'],
            labels={"escolaridade": "Escolaridade"},
            height=500
        )

        fig_esc.update_layout(xaxis_title="", yaxis_title="Escolaridade")
        st.plotly_chart(fig_esc, use_container_width=True)
        
    st.divider()

    # An√°lises por Trabalho e Renda
    st.header('An√°lise por Trabalho e Renda')

    col1, col2 = st.columns(2)

    with col1:
        # Casos positivos por Bolsa Fam√≠lia
        st.markdown("#### Casos Positivos e Bolsa Fam√≠lia")

        df_aux = casos_positivos_auxilio(mes_param, estado_param, exame_param)

        df_bolsa = df_aux.groupby("bolsa_familia", as_index=False)["positivos"].sum()

        fig_bolsa = px.pie(
            df_bolsa,
            names='bolsa_familia',
            values='positivos',
            hole=0.60,
            color_discrete_sequence=['#0c5ab5', '#07a6d5']
        )
        fig_bolsa.update_layout(
            showlegend=True,
            margin=dict(t=0, b=0, l=0, r=0),
            height=300
        )
        st.plotly_chart(fig_bolsa, use_container_width=True)

    with col2:
        # Casos positivos por aux√≠lio emergencial
        st.markdown("#### Casos Positivos e Aux√≠lio Emergencial")

        df_auxilio = df_aux.groupby("auxilio", as_index=False)["positivos"].sum()

        fig_auxilio = px.pie(
            df_auxilio,
            names='auxilio',
            values='positivos',
            hole=0.60,
            color_discrete_sequence=['#0c5ab5', '#07a6d5']
        )
        fig_auxilio.update_layout(
            showlegend=True,
            margin=dict(t=0, b=0, l=0, r=0),
            height=300
        )
        st.plotly_chart(fig_auxilio, use_container_width=True)

    # Casos Positivos por Faixa de Renda
    st.markdown("### Casos Positivos por Faixa de Renda")
    df_renda = casos_positivos_renda(mes_param, estado_param, exame_param)

    fig_renda = px.bar(
        df_renda,
        x="faixa_renda",
        y="positivos",
        color="positivos",
        color_continuous_scale=['#8ae4ff', '#0c5ab5'],
        labels={"faixa_renda": "Faixa de Renda", "positivos": "Casos Positivos"}
    )
    st.plotly_chart(fig_renda, use_container_width=True)
